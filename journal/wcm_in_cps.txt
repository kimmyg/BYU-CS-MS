We have covered how to transform the $\lambda$-calculus into CPS. Now we consider the 
$\lambda$-calculus with two additional forms: \emph{wcm} and \emph{ccm}.

suppose that we can bind variables with specific names.

fact n k
  if n == 0
    k 1
  else
    fact (n - 1) (\acc -> k (n * acc))

fact n k
  if n == 0
    k (1,ccm)
  else
    wcm n $ fact (n - 1) (\(acc,ms) -> k (n*acc,ms))

ccm k -> k ms [where 'ms' is the name of the bound variable]

x -> \k.k x
\x.e -> \x.T(e)

k

\acc -> * n acc k

fact 0 k

k 1

fact 1 k
  fact 0 (\acc -> k (1 * acc))

fact 1 k
 (\acc -> k (1 * acc)) 1

fact 3 k
  (\acc -> (\acc -> (\acc -> k (3 * acc)) (2 * acc)) (1 * acc)) 1

fact 0 k
  ccm (\ms -> (1,ms))

fact 1 k
  wcm 1 (fact (n - 1) (\acc -> k (n * acc)) 


ccm k = k ms

let ms = [] in
  let n = 3 in
    let ms = 3:ms in
      let acc = fact (n - 1)


fact n = wcm n (n * fact (n - 1))

fact n = 
let ms = n:ms in
  let acc = fact (n - 1) in
    n * acc

fact n =
if n == 0
  let ms' = ccm in
    (ms',1)
else
  let ms = n:ms in
    let (ms',acc) = fact (n - 1) in
      (ms',n * acc)

ccm = ms

fact 2
  let ms = 2:ms in
    let (ms',acc) =
     (let ms = 1:ms in
        let (ms',acc) =
         (let ms' = ccm in
            (ms',1))
          (ms',1 * acc))
      (ms',2 * acc)


wcm 5 ccm

wcm 5 ccm k

first of all, we probably want to pass k in unchanged since ccm should be in tail position.

plus 2 4 k = k (2 + 4)

fact n k = fact (n - 1) (\acc -> * n acc k)

wcm 5 ccm k = \ms@(5:ms) -> ccm k
\ms -> k ms

wcm m f k

(\ms -> f k) m:ms

wcm 5 ccm k

(\ms -> ccm k) 5:ms 
(\ms -> k ms) 5:ms
k 5:ms

fact 2 k = wcm 2 (fact 1 (\acc -> * 2 acc k))
fact 2 k = (\ms -> (fact 1 (\acc -> * 2 acc k))) 2:ms

fact 2 k = (\ms -> (\ms -> (fact 0 (\(acc,ms') -> * 1 acc (\(acc -> * 2 acc k)))) 1:ms) 2:ms

fact 0 k = ccm (\ms' -> k (1,ms'))


fact n k =
= n 0 (\zero? ->
  if zero?
    ccm (\ms -> pair 1 ms k)
  else
    wcm n (fact (n - 1) (\(acc,ms) -> * n acc (\acc -> pair acc ms k)))

- n 1 (\n_minus_1 ->
  fact n_minus_1 (\(acc,ms) -> * n acc (\acc -> pair acc ms k)))

    wcm n (fact (n - 1) (\(acc,ms) -> * n acc (\acc -> pair acc ms k)))

every function takes two arguments: the continuation and the marks

ccm k ms = k ms ms

wcm m f k ms = f k m:ms

