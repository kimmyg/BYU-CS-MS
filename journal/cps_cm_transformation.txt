cps transformation
cps transformation with continuation marks
optimized version

CPS transformation

C[x] = \k.(k x)
C[\x.E] = \k.(k (\x.C[E]))
C[E F] = \k.(C[E] (\e.C[F] (\f.((e f) k))))

cps with cm

C[x] = \k.\m.(k x)
C[\x.E] = \k.\m.(k (\x.C[E]



C[x] = \k.\m.(k x)
C[\x.E] = \k.\m.\x.((C[E] k) m)
C[E F] = \k.\m.((C[E] (\e.((C[F] (\f.(((e f) k) m))) m))) m)
C[wcm N E] = \k.\m.((C[N] (\n.((C[E] k) g(n,m)) m)
C[ccm] = \k.\m.(snd m)

where g(n,m) = (true,(cons n snd (if fst m then snd m else m)))

Evaluation in the lambda calculus

Reduction is evaluation. Reduction occurs in applications which can appear in 
any term.

If no evaluation can be performed on a term, it is a value. (What does 
evaluation mean?)

Thus,

x
\x.x
\x.\y.x

and even

y x

are all values;

\x.x y
\x.\y.x y z
\x.(\y.y z)

are not.

This allows us to define tail position with respect to the lambda calculus.

Recall that a subexpression E' is in tail position within an expression E if 
E evaluates to E' in all cases. (Is this true?)

Variables and abstractions--even abstractions that are not values--are in tail 
position. This is unsurprising, since evaluation is reduction, and reduction 
occurs in application.

Consider

\x.x y.

Is y in tail position?

\x.\y.x z w

Is z in tail position?

What is the relationship between a reduction regime and tail position?

We know that we reduce wcm M E to wcm m E to wcm m v to v. Is this an artifact 
of a strict language?

The Church-Rosser property of the lambda calculus ensures that reduction order 
will not affect values /for terminating reductions/. For instance,

\x.(x x) \x.(x x)

does not terminate. However,

\y.z (\x.(x x) \x.(x x))

terminates if the outer term is reduced before the argument, but fails to 
terminate if the argument is reduced first. From this, we see that the 
termination property can depend on the reduction order.

One of the properties of a continuation-passing characterization is that it 
imposes a reduction order. (It is this that allowed Plotkin to simulate the 
call-by-name lambda calculus with the call-by-value and vice versa.) When we 
consider the application 

E F

for instance, we are assuming that both E and F need to be evaluated before 
application. Fischer's CPS transformation of this makes this clear:

C[E F]=\k.(C[E] (\e.C[F] (\f.((e f) k))))

An invariant of the transform is that formal parameters will be substituted 
with values. (This can be shown by induction.)

Consider the CPS transformation of omega:

C[x]=\k.(k x)

and is reduced.

C[x x]=\k.(C[x] (\e.(C[x] (\f. ((e f) k)))))
      =\k.(\k.(k x) (\e.(\k.(k x) (\f.((e f) k)))))

and reduces to

x x.

C[\x.(x x)]=\k.(k (\x.C[x x]))
C[\x.(x x) \x.(x x)]=\k.(C[\x.(x x)] (\e.C[\x.(x x)] (\f ((e f) k))))

...

Our transformation of a wcm form utilizes this:

C[wcm M F]=C[M] (\m....)

Recall the semantics for lambda cm.

the evaluation of (wcm (\x.x 0) (wcm (\x.x 1) (ccm))

(wcm 0 (wcm (\x.x 1) (ccm)))
(wcm 0 (wcm 1 (ccm)))
(wcm 1 (ccm))
(wcm 1 X[(wcm 1 [])])
(wcm 1 1:X[[]])
(wcm 1 1:[])
1:[]

Consider the correct behavior of this:

(wcm 0 (wcm (wcm 1 (ccm)) (ccm)))
(wcm 0 (wcm (wcm 1 X[(wcm 1 [])]) (ccm)))
(wcm 0 (wcm (wcm 1 1:X[[]]) (ccm)))
(wcm 0 (wcm (wcm 1 1:[]) (ccm)))
(wcm 0 (wcm 1:[] (ccm)))
(wcm 1:[] (ccm)))
(wcm 1:[] X[(wcm 1:[] [])])
(wcm 1:[] (1:[]):X[[]])
(wcm 1:[] (1:[]):[])
(1:[]):[]

Now consider the correct behavior of this:

(wcm 0 (\x.(wcm 1 x) (ccm)))
(wcm 0 (\x.(wcm 1 x) X[(wcm 0 (\x.(wcm 1 x) []))])
(wcm 0 (\x.(wcm 1 x) 0:X[(\x.(wcm 1 x) [])])
(wcm 0 (\x.(wcm 1 x) 0:X[[]])
(wcm 0 (\x.(wcm 1 x) 0:[])
(wcm 0 (wcm 1 0:[]))
(wcm 1 0:[])
0:[]

The below paragraph is actually not correct!

The definition X([]) refers to the value of the outermost "context", i.e., the top level. The evaluation of the 
X metafunction proceeds outwards.

C[x]=\k.\m.(k x)
C[\x.E]=\k.\m.(k \x.C[E])
C[E F]=\k.\m.((C[E] (\e.((C[F] (\f.(((e f) k) m))) g(m))) g(m))
C[wcm E F]=\k.\m.((C[E] (\e.((C[F] k) t(e,m)) m)
C[ccm]=\k.\m.(k (snd m))

t(e,m)=(true,cons e (if (first m) then (tail (snd m)) else (snd m)))
g(m)=(false,snd m)



the non-continuation-passing transform

C[x]=\m.x
C[\x.E]=\m.\x.C[E] m
C[E F]=\m.C[E] f(m) (C[F] f(m)) -- but once evaluation of E and F is done, we 
want the actual application to take m

Let C be the transformation function, L be the lambda calculus evaluation 
function, and M be the continuation mark evaluation function.

M[ccm]=\x.\y.y (nil)
C[M[ccm]]=\k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y)))

(\y.(\x.x y) z)
\x.x z
z

don't evaluate under abstractions: this has to do with laziness, apparently
the [] in the evaluation refers to the hole, not the outermost context. observe 
that this puts the marks in an opposite order.

Recall that variables and abstractions are values; neither can be reduced, 
according to our rules. With this in mind:

L[C[x]]=L[\k.(k x)]=\k.(k x)
C[L[x]]=C[x]=\k.(k x)

L[C[\x.E]]=L[\k.(k \x.C[E])]=\k.(k \x.C[E])
C[L[\x.E]]=C[\x.E]=\k.(k \x.C[E])

L[C[E F]]=L[\k.(C[E] (\e.(C[F] (\f.((e f) k)))))]=\k.(C[E] (\e.(C[F] (\f.((e f) k)))))
C[L[\x.E F]]=C[L[E[x<-F]]]

We are finally ready to define our transformation in full CPS style. We will make some 
informal arguments as we go, verifying that this transform is correct.

C[x]=\k.\m.(k x)

Fortunately, there is essentially no difference between the CPS CM transform and the 
vanilla CPS transform since there is no difference between a variable in lambda cm 
and a variable in the lambda calculus.

C[\x.E]=\k.\m.(k \x.C[E])

Once again, we fall back to the vanilla CPS transform. We can be somewhat confident 
to disregard the parameter m, as the vanilla CPS does not induce any evaluation in 
this case. This is because abstractions are values.

We can perform a sanity check to make sure simple cases work how we expect. According 
to the definition so far,

C[\x.x]=\k.\m.(k \x.C[x])
       =\k.\m.(k \x.\k.\m.x)
.
Now consider the CPS transformation of the same term

C[\x.x]=\k.(k \x.\k.x)

and the ``evaluation'' of that term by passing the identity

(\k.(k \x.\k.x) \y.y)=(\y.y \x.\k.x)
                     =\x.\k.x
.
Evaluation in a CPS term is initiated by an application to the identity function which 
triggers a cascade of reductions. We might consider values to be more stable as they 
don't give way to an avalanche of reduction.

Similarly, our constructed value \k.\m.(k \x.\k.\m.x) is stable against an initiating 
application of the identity function and the empty list, yielding \x.\k.\m.x.

C[E F]=\k.\m.((C[pair false (snd m)] (\m'.((C[E] (\e.((C[F] (\f.(((e f) k) m))) m')) m')) m)

We must take care not to transform terms multiple times. While evaluation is idempotent:

E[E[1+1]]=E[1+1]

transformation is not:

C[x]=\k.\m.(k x)
C[C[x]]=C[\k.\m.(k x)]=\k.\m.\k.(k \k.C[\m.(k x)])

To assist us to this end, we maintain an invariant: every argument is fully evaluated 
before reduction occurs. The Plotkin-Fischer CPS transform accomplishes just that, and 
we adopt its mechanism.

This is most apparent with the (forthcoming) definition of the transformation of ccm.

C[ccm]=\k.\m.((C[snd m] (\m'.(k m'))) m)

where snd is \p.(p \x.\y.y)

Then the full transformation of the program ccm is

C[ccm]=\k.\m.((C[snd m] (\m'.(k m'))) m)
C[snd m]=\k.\m.

try this

C[ccm]=\k.\m.(CPS[snd m] (\m'.(k m')))
CPS[snd m]=\k.(CPS[snd] (\snd'.(CPS[m] (\m'.((snd' m') k))))

C[E[ccm]]=C[\x.\y.y]=\k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y)))
E[C[ccm]]=E[\k.\m.(CPS[snd m] k)]

CPS[snd m]=\k.(CPS[snd] (\snd'.(CPS[m] (\m'.((snd' m') k))))
CPS[snd]=\k.(k \x.\k.(k \y.\k.(k y)))

((C[ccm] \x.x) \p.((p \x.\y.y) \x.\y.y))

we want this to be C[E[ccm]] (see above)

C[\p.((p \x.\y.y) \x.\y.y)]=\k.\m.(k \p.C[((p \x.\y.y) \x.\y.y)])
C[((p \x.\y.y) \x.\y.y]=\k.\m.(k

snd \k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y))

Conceptually, C[ccm]=\k.\m.(k (snd m)). \k.\m.((C[snd m] k) ?) will not work, least of all 
for the continuation mark argument necessary.

C[E_cm[ccm]]=C[\x.\y.y]=\k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y)))

E_lc[C[ccm]]=...=\k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y)))



=((\k.\m.(k (m \x.\y.x)) \x.x) \p.((p \k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y)))) \k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y)))))
=\k.\m.(k \x.\k.\m.(k \y.\k.\m.(k y)))

\k.\m.(k \p.
