#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

<<<<<<< HEAD
            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 54 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1256 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 5 #"redex"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 13 #"racket/pretty"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 19 3 8 #"\"cm.rkt\""
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 19 3 8 #"\"lc.rkt\""
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 19 3 15 #"\"transform.rkt\""
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 19 3 11 #"\"alpha.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"transform-test"
0 0 4 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-reduction-relation*"
0 0 4 3 1 #" "
0 0 14 3 7 #"\316\273cm-rr"
0 0 4 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 6 #"value1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"transform"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 6 #"value2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-reduction-relation*"
0 0 4 3 1 #" "
0 0 14 3 6 #"\316\273v-rr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"init"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"transform"
0 0 4 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"alpha-eq?"
0 0 4 3 1 #" "
0 0 14 3 6 #"value1"
0 0 4 3 1 #" "
0 0 14 3 6 #"value2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"term->first-alpha"
0 0 4 3 1 #" "
0 0 14 3 6 #"value1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"term->first-alpha"
0 0 4 3 1 #" "
0 0 14 3 6 #"value2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"term->first-alpha"
0 0 4 3 1 #" "
0 0 14 3 6 #"value1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"term->first-alpha"
0 0 4 3 1 #" "
0 0 14 3 6 #"value2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 20 3 2 #"#f"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"trace"
0 0 4 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"traces"
0 0 4 3 1 #" "
0 0 14 3 7 #"\316\273cm-rr"
0 0 4 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"traces"
0 0 4 3 1 #" "
0 0 14 3 6 #"\316\273v-rr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"init"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"transform"
0 0 4 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 2 #"bv"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"ccm"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"ccm"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"gensym"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 3 #"wcm"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"bv"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cm-term-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"ccm"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"1"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"wcm"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_1"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cm-term-length"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cm-term-length"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_2"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_1"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cm-term-length"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cm-term-length"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_2"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 3 #"x_1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cm-term-length"
0 0 4 3 1 #" "
0 0 14 3 3 #"e_1"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 1 #"x"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"1"
0 0 22 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(transform-test '1)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(transform-test '(\316\273 (x) x))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(transform-test '(ccm))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(transform-test '((\316\273 (x) x) (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(transform-test '(wcm 0 (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(transform-test '(wcm (ccm) (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 53
#";(transform-test '(wcm (wcm (ccm) (ccm)) (\316\273 (x) x)))"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";(transform-test '(wcm (wcm (ccm) (ccm)) b))"
0 0 24 29 1 #"\n"
0 0 17 3 50
#";(transform-test '(wcm (\316\273 (a) (\316\273 (b) b)) (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";(transform-test '(wcm (\316\273 (x) x) (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 50
#";(transform-test '(wcm (\316\273 (x) (\316\273 (y) x)) (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(transform-test '(wcm 0 (wcm 1 (ccm))))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(transform-test 'F)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(transform-test '(wcm (ccm) 3))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(transform-test '((ccm) 2))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(transform-test '(wcm ((ccm) 1) (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(transform-test '(wcm 0 ((ccm) (ccm))))"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";(transform-test '(wcm 1 ((ccm) (\316\273 (x) (\316\273 (y) x)))))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(transform-test '(a b))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(transform-test '(wcm (ccm) (ccm)))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(transform-test '((wcm (ccm) (ccm)) 1))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(transform-test '(Y (wcm (ccm) (ccm))))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(transform-test '(error (ccm)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"wcm"
0 0 24 3 1 #" "
0 0 20 3 1 #"0"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"ccm"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"traces"
0 0 17 3 1 #" "
0 0 17 3 7 #"\316\273cm-rr"
0 0 17 3 3 #" p)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"traces"
0 0 17 3 1 #" "
0 0 17 3 6 #"\316\273v-rr"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"init"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 9 #"transform"
0 0 17 3 5 #" p)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"apply-reduction-relation/n"
0 0 24 3 1 #" "
0 0 14 3 2 #"rr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"apply-reduction-relation/n"
0 0 24 3 1 #" "
0 0 14 3 2 #"rr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"apply-reduction-relation"
0 0 24 3 1 #" "
0 0 14 3 2 #"rr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 5 #")))))"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 14 #"transform-test"
0 0 24 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"wcm"
0 0 24 3 1 #" "
0 0 20 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 22 3 2 #"(("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"ignored"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 22 3 2 #"(("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 3 #"wcm"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 3 #"ccm"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 14 #"transform-test"
0 0 24 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"wcm"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 22 3 2 #"(("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"ignored"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 22 3 2 #"(("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 3 #"wcm"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 3 #"ccm"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(transform-test '(\316\273 (u) u))"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"trace"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";(trace '((ccm) 2))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 28 #"the-important-property-holds"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 6 #"value1"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"transform"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-reduction-relation*"
0 0 24 3 1 #" "
0 0 14 3 7 #"\316\273cm-rr"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 6 #"value2"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-reduction-relation*"
0 0 24 3 1 #" "
0 0 14 3 6 #"\316\273v-rr"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"transform"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"alpha-eq?"
0 0 24 3 1 #" "
0 0 14 3 6 #"value1"
0 0 24 3 1 #" "
0 0 14 3 6 #"value2"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"prepare-cm-term"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"random-cm-term"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cm-term-length"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 1 #"t"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"check"
0 0 4 3 1 #" "
0 0 14 3 8 #"generate"
0 0 4 3 1 #" "
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 10 #"#:attempts"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 4 #"1000"
0 0 22 3 2 #"])"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"do"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 2 #"(["
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"["
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"generate"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"generate"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 2 #"(("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 20 3 2 #"#f"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 14 3 6 #"result"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"check"
0 0 17 3 1 #" "
0 0 17 3 14 #"random-cm-term"
0 0 17 3 1 #" "
0 0 17 3 28 #"the-important-property-holds"
0 0 17 3 1 #" "
0 0 17 3 10 #"#:attempts"
0 0 17 3 1 #" "
0 0 17 3 3 #"25)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 11 #"redex-check"
0 0 17 3 1 #" "
0 0 17 3 4 #"\316\273cm"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 28 #"the-important-property-holds"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"term"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 42 #"#:attempts 1000 #:prepare prepare-cm-term)"
0 0 24 29 1 #"\n"
0           0
=======
(define (transform-test program)
  (let* ((value (first (apply-reduction-relation* λcm-rr program)))
         (value1 (transform value))
         (value2 (first (apply-reduction-relation* λv-rr (init (transform program))))))
    (if (alpha-eq? value1 value2)
        (if #f
            (begin
              (display value)
              (newline)
              (display (term->first-alpha value1))
              (newline)
              (display (term->first-alpha value2))
              (newline)
              #t)
            #t)
        (begin
          (display value)
          (newline)
          (display (term->first-alpha value1))
          (newline)
          (display (term->first-alpha value2))
          (newline)
          #f))))

(define (trace program)
  (begin
    (traces λcm-rr program)
    (traces λv-rr (init (transform program)))))

(define (random-cm-term l [bv (list)])
  (if (> l 0)
      (cond
        ((= l 1)
         (if (empty? bv)
             '(ccm)
             (let ((c (random 7)))
               (cond
                 ((< c 4)
                  (list-ref bv (random (length bv))))
                 ((< c 6)
                  (random 10))
                 (else
                  '(ccm))))))
        (else
         (let ((c (random 8)))
           (cond
             ((< c 4)
              (let ((x (gensym 'x)))
                `(λ (,x) ,(random-cm-term (- l 1) (cons x bv)))))
             ((< c 6)
              (let ((d (+ (random (- l 1)) 1)))
                `(,(random-cm-term d bv) ,(random-cm-term (- l d) bv))))
             (else
              (let ((d (+ (random (- l 1)) 1)))
                `(wcm ,(random-cm-term d bv) ,(random-cm-term (- l d) bv))))))))
      #f))

(define (cm-term-length t)
  (match t
    [(list 'ccm)
     1]
    [(list 'wcm e_1 e_2)
     (+ (cm-term-length e_1) (cm-term-length e_2))]
    [(list e_1 e_2)
     (+ (cm-term-length e_1) (cm-term-length e_2))]
    [(list 'λ (list x_1) e_1)
     (+ 1 (cm-term-length e_1))]
    [x
     1]))

(transform-test '1)
(transform-test '(λ (x) x))
(transform-test '(ccm))
(transform-test '((λ (x) x) (ccm)))
(transform-test '(wcm 0 (ccm)))
(transform-test '(wcm (ccm) (ccm)))
(transform-test '(wcm (wcm (ccm) (ccm)) (λ (x) x)))
(transform-test '(wcm (wcm (ccm) (ccm)) b))
;(transform-test '(wcm (λ (a) (λ (b) b)) (ccm)))
(transform-test '(wcm (λ (x) x) (ccm)))
(transform-test '(wcm (λ (x) (λ (y) x)) (ccm)))
(transform-test '(wcm 0 (wcm 1 (ccm))))
;(transform-test 'F)
(transform-test '(wcm (ccm) 3))
(transform-test '((ccm) 2))
(transform-test '(wcm ((ccm) 1) (ccm)))
(transform-test '(wcm 0 ((ccm) (ccm))))
(transform-test '(wcm 1 ((ccm) (λ (x) (λ (y) x)))))
;(transform-test '(a b))
(transform-test '(wcm (ccm) (ccm)))
(transform-test '((wcm (ccm) (ccm)) 1))
;(transform-test '(Y (wcm (ccm) (ccm))))
(transform-test '(error (ccm)))
(transform-test '(wcm 1 (wcm (ccm) (ccm))))
(transform-test '(wcm 0 ((λ (x) (wcm x (ccm))) 1)))

(define p '(wcm 0 (ccm)))
;(trace '(x (λ (y) y)))

;(traces λcm-rr p)
;(traces λv-rr (init (transform p)))

;(trace '((λ (x) (x x)) (λ (x) (x x))))

(define (apply-reduction-relation/n rr e n [i 0])
  (if (= i n)
      (list e)
      (apply append (map (λ (t) (apply-reduction-relation/n rr t n (+ i 1))) (apply-reduction-relation rr e))))) 

#;(transform-test '(wcm 0
                        ((λ (ignored)
                           ((λ (x) x)
                            (wcm 1
                                 (ccm))))
                         (λ (x) x))))

#;(transform-test '(wcm (λ (f) (λ (z) z))
                        ((λ (ignored)
                           ((λ (x) x)
                            (wcm (λ (f) (λ (z) (f z)))
                                 (ccm))))
                         (λ (x) x))))

;
;(transform-test '(λ (u) u))
;(trace '((λ (x366504) (λ (x366505) ((wcm (wcm (λ (x366506) x366504) (wcm 3 x366504)) (λ (x366507) x366505)) (λ (x366508) (λ (x366509) (wcm (λ (x366510) (λ (x366511) (x366505 2))) (λ (x366512) (λ (x366513) (wcm ((wcm 3 0) 2) 1))))))))) (λ (x366514) ((wcm (λ (x366515) x366515) x366514) x366514))))
;(trace '((ccm) 2))

(define (the-important-property-holds program)
  (let* ((value1 (transform (first (apply-reduction-relation* λcm-rr program))))
         (value2 (first (apply-reduction-relation* λv-rr (init (transform program))))))
    (alpha-eq? value1 value2)))

(define (prepare-cm-term term)
  (let ((t (random-cm-term (cm-term-length term))))
    (begin
      (display t)
      (newline)
      t)))

(define (check generate test #:attempts [n 1000])
  (let ((result (do
                    ([i 0 (+ i 1)]
                     [t (generate 1) (generate (+ i 2))])
                  ((or (= i n) (not (test t)))
                   (if (= i n)
                       #f
                       t))
                  (display t)
                  (newline))))
    result))

;(check random-cm-term the-important-property-holds #:attempts 10)


;(redex-check λcm e (the-important-property-holds (term e)) #:attempts 1000 #:prepare prepare-cm-term)
>>>>>>> cff424bc4a598d6976c68c48c6cb53efaef6f7c3
